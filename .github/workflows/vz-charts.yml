# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      CHART_NAME:
        type: text
        required: true
      CHART_VERSION:
        type: text
        required: true
      HELM_CHART_REPO_URL:
        type: text
        required: true
      VZ_CHARTS_GITHUB_REPO:
        type: text
        required: true
        default: https://github.com/lake-of-dreams/charts
      

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        name: checkout main repo
      - name: Create/Update directory for templates branch
        run: |
          mkdir -p $GITHUB_WORKSPACE/templates_branch
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        name: checkout templates
        with:
          ref: templates
          path: templates_branch

      # Runs a set of commands using the runners shell
      - name: Create/Update chart directories
        run: |
          mkdir -p $GITHUB_WORKSPACE/charts/${{ inputs.CHART_NAME }}/${{ inputs.CHART_VERSION }}
          mkdir -p $GITHUB_WORKSPACE/testing/${{ inputs.CHART_NAME }}
          mkdir -p $GITHUB_WORKSPACE/patches/${{ inputs.CHART_NAME }}/${{ inputs.CHART_VERSION }}
          mkdir -p $GITHUB_WORKSPACE/publish/${{ inputs.CHART_NAME }}
          cp -n $GITHUB_WORKSPACE/templates_branch/publish/publish.sh $GITHUB_WORKSPACE/publish/${{ inputs.CHART_NAME }}/.
          cp -n $GITHUB_WORKSPACE/templates_branch/testing/test.sh $GITHUB_WORKSPACE/testing/${{ inputs.CHART_NAME }}/.
          cp -n $GITHUB_WORKSPACE/templates_branch/patches/build.sh $GITHUB_WORKSPACE/patches/${{ inputs.CHART_NAME }}/.
          cp -n $GITHUB_WORKSPACE/templates_branch/patches/version/build.sh $GITHUB_WORKSPACE/patches/${{ inputs.CHART_NAME }}/${{ inputs.CHART_VERSION }}/.
          rm -rf $GITHUB_WORKSPACE/templates_branch
          
      - name: Helm tool installer
        uses: Azure/setup-helm@v3
        
      - name: pull helm chart
        run: |
          helm repo add ${{ inputs.CHART_NAME }}-provider ${{ inputs.HELM_CHART_REPO_URL }}
          helm pull --untar --untardir=$GITHUB_WORKSPACE/charts/${{ inputs.CHART_NAME }}/${{ inputs.CHART_VERSION }} ${{ inputs.CHART_NAME }}-provider/keycloak --version ${{ inputs.CHART_VERSION }}
          mv $GITHUB_WORKSPACE/charts/${{ inputs.CHART_NAME }}/${{ inputs.CHART_VERSION }}/${{ inputs.CHART_NAME }}/* $GITHUB_WORKSPACE/charts/${{ inputs.CHART_NAME }}/${{ inputs.CHART_VERSION }}/.
          rm -rf $GITHUB_WORKSPACE/charts/${{ inputs.CHART_NAME }}/${{ inputs.CHART_VERSION }}/${{ inputs.CHART_NAME }}
          
      - name: push helm chart code
        uses: actions-x/commit@v6
        with:
          github-token: ${{ secrets.GIT_TOKEN }}
          commit-message: 'publish'
          force-add: 'true'
         
          
          
          
        
        
          
          
          
